@* Generator : Template TypeVisibility : Internal *@
@using System
@using System.Collections.Generic
@using System.Linq
@using ApiDocumenter.Models
@using Voodoo
@using System.Linq
@using System.Web

@functions  {
    public List<NamespaceNode> Model { get; set; }
    public Dictionary<Type, string> Paths { get; set; }

    public HtmlString getTypeName(Type type)
    {
        if (type == null)
            return new HtmlString(string.Empty);
        if (Paths.ContainsKey(type))
        {
            return new HtmlString(Paths[type]);
        }
        var genericTypes = type.GetGenericArguments();
        var result = HttpUtility.HtmlEncode(type.FixUpTypeName());
        if (genericTypes.Any())
        {
            foreach (var genericType in genericTypes)
            {            
                if (Paths.ContainsKey(genericType))
                    result = result.Replace(genericType.FixUpTypeName(), Paths[genericType]);
            }
        }

        if (type.BaseType != null && type.GetGenericArguments().Any())
        {
            foreach (var item in Paths.Keys)
            {
                if (item.GetGenericArguments().Any())
                {
                    if (type.GetTypeNameWithoutGenericArguments() == item.GetTypeNameWithoutGenericArguments())
                    {
                        var typeName = item.GetTypeNameWithoutGenericArguments();
                        //var typeName = HttpUtility.HtmlEncode(item.FixUpTypeName());
                        var path = Paths[item];
                        result = result.Replace(typeName, path);
                        break;
                    }
                }
            }
        }
        return new HtmlString(result);
    }

}
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Document-Bootstrap</title>
    <!-- Mobile viewport optimized -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <!-- Mobile Internet Explorer allows us to activate ClearType technology for smoothing fonts for easy reading -->
    <meta http-equiv="cleartype" content="on">

    <!-- Le styles -->
    <link href="css/bootswatch/Cosmo/bootstrap.min.css" rel="stylesheet">
    <link href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.21/themes/black-tie/jquery-ui.css" rel="stylesheet">
    <link href="css/jquery.tocify.css" rel="stylesheet">
    <link href="css/prettify.css" rel="stylesheet" type="text/css">
    <link href="css/styles.css" rel="stylesheet" type="text/css">
    <link href="css/rainbow/themes/tomorrow-night.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" type="text/css" href="css/rainbowlines/theme.css" media="screen" />
    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
            <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"> </script>
        <![endif]-->

    <!-- Le fav and touch icons -->
    <link href="../assets/ico/favicon.ico" rel="shortcut icon">
    <link href="../assets/ico/apple-touch-icon-144-precomposed.png" rel="apple-touch-icon-precomposed" sizes="144x144">
    <link href="../assets/ico/apple-touch-icon-114-precomposed.png" rel="apple-touch-icon-precomposed" sizes="114x114">
    <link href="../assets/ico/apple-touch-icon-72-precomposed.png" rel="apple-touch-icon-precomposed" sizes="72x72">
    <link href="../assets/ico/apple-touch-icon-57-precomposed.png" rel="apple-touch-icon-precomposed">
    <style type="text/css">
        /*TODO: move to css*/
        .widthTiny{ width:5%;}
        .widthSmall{ width:15%;}
        .widthMedium{ width:35%;}
        .widthLarge{ width:50%;}        
        .nuget-badge code {
            -moz-border-radius: 5px;
            -webkit-border-radius: 5px;
            background-color: #202020;
            border: 4px solid silver;
            border-radius: 5px;
            box-shadow: 2px 2px 3px #6e6e6e;
            color: #e2e2e2;
            display: block;
            font: 1.5em 'andale mono','lucida console',monospace;
            line-height: 1.5em;
            overflow: auto;
            padding: 15px;
        }
    </style>
</head>

<body>
    <a id="fork-me" href="#" target="_blank">
        <img style="border: 0px currentColor; border-image: none; top: 0px; right: 0px; position: fixed; z-index: 999999;" alt="Fork me on GitHub" src="https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png"></a>
    <nav class="navbar navbar-default navbar-fixed-top" role="navigation" style="margin-bottom: 120px;">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">Project.Name</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
            <ul class="nav navbar-nav">
                <li class="active"><a href="#">Link</a></li>
                <li><a href="#">Link</a></li>
                <!--  <li class="dropdown">
                              <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown <b class="caret"></b></a>
                              <ul class="dropdown-menu">
                                  <li><a href="#">Action</a></li>
                                  <li><a href="#">Another action</a></li>
                                  <li><a href="#">Something else here</a></li>
                                  <li class="divider"></li>
                                  <li><a href="#">Separated link</a></li>
                                  <li class="divider"></li>
                                  <li><a href="#">One more separated link</a></li>
                              </ul>
                          </li> -->
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </nav>


    <div class="container-fluid" style="margin-top: 50px;">
        <div class="row">
            <div class="tocify col-sm-3 col-md-3">
                <div id="toc">
                </div>
                <!--/.well -->
            </div>
            <!--/span-->
            <div class="col-sm-9 col-md-9">
                <div class="jumbotron">
                    <h1>Project.Name</h1>

                    <br>
                    <br>

                    <h2>Description</h2>
                    <p>Enter Project Repo Description Here</p>
                    <br>
                    <p>
                        The project is hosted on <a class="projectLinks" href="#" target="_blank">Github</a> and is available for use under the <a class="projectLinks" href="#" target="_blank">MIT software license</a>.  You can report bugs and discuss features on the <a href="#" target="_blank">GitHub issues page</a>, or send tweets to <a href="#" target="_blank">Enter Project Twitter Page Here</a>.
                    </p>
                    <p><a class="btn btn-primary btn-lg" href="#" target="_blank">Fork on Github »</a></p>
                </div>
                
                
                <h2>Install from Nuget</h2>
                <div class="nuget-badge">
                    <p>
                        <code>PM&gt; Install-Package Project.Name
                        </code>
                    </p>
                </div>
                <h2>Requirements</h2>
                <br>
                <p class="well">
                    Enter Project Requirements Here
                </p>
                
                <br>

                <!-----------Start---------------->


                @foreach (var node in Model)
                {
                    <h2 data-path="@(node.Path)">@(node.Name)</h2>
                    <p class="well">
                    </p>
                    foreach (var classNode in node.Classes)
                    {
                    <a id="@HttpUtility.HtmlEncode(classNode.Path)">&nbsp;</a>
                    <h3 data-path="@(node.Path)">@HttpUtility.HtmlEncode(classNode.Name)</h3>
                        if (classNode.Interfaces.Any())
                        {
                    <b>@("Interfaces: ")</b>
                        }
                        foreach (var face in classNode.Interfaces)
                        {
                    @(getTypeName(face))
                            if (face != classNode.Interfaces.Last())
                            {
                    @(", ")
                            }
                        }
                        if (classNode.Interfaces.Any())
                        {
                    <br />
                        }
                        if (@classNode.Parents.Any())
                        {
                    <b>@("Inheritance Hierarchy: ")</b>
                    <br />
                        }
                        const string tab = "&nbsp;&nbsp;&nbsp;&nbsp;";
                        var indent = tab;
                        foreach (var parent in classNode.Parents)
                        {
                    @(indent)@HttpUtility.HtmlEncode(getTypeName(parent))<br />
                            indent = indent + tab;
                        }

                    <br />
                    <p class="well">
                    </p>
                        if (classNode.Properties.Any())
                        {
                    <h4>Properties</h4>
                            <table class="table table-striped table-bordered table-condensed">
                                
                                <colgroup>
                                    <col class="widthTiny"  />
                                    <col class="widthMedium"  />
                                    <col class="widthSmall"  />
                                    <col class="widthLarge"  />
                                    
                                </colgroup>
                                <tbody>
                                    <tr>
                                        <th></th>
                                        <th>Type</th>
                                        <th>Name</th>
                                        <th>Remarks</th>
                                    </tr>
                                    @foreach (var property in classNode.Properties)
                                    {
                                        <tr data-path="@(property.Path)">

                                            <td title="@(property.FullName)" class="optionName" data-content="">
                                                @(property.IsStatic ? "static" : "")
                                            </td>
                                            <td>@getTypeName(property.ReturnType)</td>
                                            <td>@(property.Name)</td>
                                            <td></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        if (classNode.Methods.Any())
                        {
                    <h4>Methods</h4>

                            <table class="table table-striped table-bordered table-condensed">
                                <colgroup>                                   
                                </colgroup>
                                <tbody>
                                    <tr>
                                        <th></th>
                                        <th>Return Type</th>
                                        <th>Source</th>
                                        <th>Method</th>
                                        <th>Remarks</th>
                                    </tr>
                                    @foreach (var method in classNode.Methods)
                                    {
                                        <tr data-path="@(method.Path)">
                                            <td title="@(method.FullName)" class="optionName" data-content="">
                                                @(method.IsStatic ? "static" : "")
                                            </td>
                                            <td>@getTypeName(method.ReturnType)</td>
                                            <td>@getTypeName(method.SourceType)</td>
                                            @{ var text = String.Concat(method.Name, method.TypeArguments, "(", method.Signature, ")"); }
                                            <td>@HttpUtility.HtmlEncode(text)</td>
                                            <td></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    }
                }

                <!-------------------------End----------------->

                <h2>Contributing</h2>
                <p class="well">
                    Take care to maintain the existing coding style. Add <strong>Enter Unit Testing Framework</strong> unit tests for any new or changed functionality. Lint and test your code using <strong>Enter Build Tool Here</strong>.
                </p>
                <p class="well">
                    <span class="note">After you have verified your code, send a pull request to the <em>Project.Name</em> develop branch.  After you send a pull request, you will hear back from me shortly after I review your code.  You’ll find source code in the <code>src</code> subdirectory!
                    </span>
                </p>
                <br>
                <h2>Extending</h2>
                <p class="well">
                    If you find that you need a feature that <em>Project.Name</em> does not currently support, either let me know via the <a href="#" target="_blank">Github issue tracker</a>, or <a href="#" target="_blank">fork the project</a> and and easily extend <em>Project.Name</em>!
                </p>
                <br>
                <h2>Copyright</h2>
                <p class="well">
                    Copyright © 2013 Enter Author Name Here
                </p>
                <p> Documentation build with <a href="https://github.com/MiniverCheevy/api-documentor">api-documentor</a> and <a href="http://gregfranko.com/Document-Bootstrap/">Document-Bootstrap</a></p>
            </div>
        </div>
        <!--/row-->

    </div>
    <!--/.fluid-container-->

    <!-- Le javascript
            ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="js/rainbow/rainbow.min.js"> </script>
    <script src="js/rainbow/language/generic.js"> </script>
    <script src="js/rainbow/language/html.js"> </script>
    <script src="js/rainbow/language/css.js"> </script>
    <script src="js/rainbow/language/javascript.js"> </script>
    <script src="js/rainbowlines/rainbow.linenumbers.js"> </script>
    <script src="js/jquery.min.js"> </script>
    <script src="js/jquery-ui.min.js"> </script>
    <script src="js/bootstrap.min.js"> </script>
    <script src="js/jquery.tocify.min.js"> </script>
    <script src="js/prettify.js"> </script>

    <script>
        $(function () {

            $("#toc").tocify({ selectors: "h2, h3, h4", scrollTo: 60, highlightOffset: 60, extendPage: true });

            prettyPrint();

            $(".optionName").popover({ trigger: "hover", container: "body" });

            $("a[href='#']").click(function (event) {

                event.preventDefault();

            });

            Rainbow.color();
        });
    </script>

</body>
</html>

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApiDocumenter
{
    
    #line 2 "..\..\Body.cshtml"
    using System;
    
    #line default
    #line hidden
    
    #line 3 "..\..\Body.cshtml"
    using System.Collections.Generic;
    
    #line default
    #line hidden
    
    #line 4 "..\..\Body.cshtml"
    using System.Linq;
    
    #line default
    #line hidden
    using System.Text;
    
    #line 8 "..\..\Body.cshtml"
    using System.Web;
    
    #line default
    #line hidden
    
    #line 5 "..\..\Body.cshtml"
    using ApiDocumenter.Models;
    
    #line default
    #line hidden
    
    #line 6 "..\..\Body.cshtml"
    using Voodoo;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    internal partial class Body : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden

        #line 10 "..\..\Body.cshtml"

    public List<NamespaceNode> Model { get; set; }
    public Dictionary<Type, string> Paths { get; set; }

    public HtmlString getTypeName(Type type)
    {
        if (type == null)
            return new HtmlString(string.Empty);
        if (Paths.ContainsKey(type))
        {
            return new HtmlString(Paths[type]);
        }
        var genericTypes = type.GetGenericArguments();
        var result = HttpUtility.HtmlEncode(type.FixUpTypeName());
        if (genericTypes.Any())
        {
            foreach (var genericType in genericTypes)
            {            
                if (Paths.ContainsKey(genericType))
                    result = result.Replace(genericType.FixUpTypeName(), Paths[genericType]);
            }
        }

        if (type.BaseType != null && type.GetGenericArguments().Any())
        {
            foreach (var item in Paths.Keys)
            {
                if (item.GetGenericArguments().Any())
                {
                    if (type.GetTypeNameWithoutGenericArguments() == item.GetTypeNameWithoutGenericArguments())
                    {
                        var typeName = item.GetTypeNameWithoutGenericArguments();
                        //var typeName = HttpUtility.HtmlEncode(item.FixUpTypeName());
                        var path = Paths[item];
                        result = result.Replace(typeName, path);
                        break;
                    }
                }
            }
        }
        return new HtmlString(result);
    }


        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");








WriteLiteral("\r\n");


WriteLiteral("\r\n<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"utf-8\">\r\n    <tit" +
"le>Document-Bootstrap</title>\r\n    <!-- Mobile viewport optimized -->\r\n    <meta" +
" name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1" +
".0, maximum-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge" +
",chrome=1\">\r\n    <!-- Mobile Internet Explorer allows us to activate ClearType t" +
"echnology for smoothing fonts for easy reading -->\r\n    <meta http-equiv=\"cleart" +
"ype\" content=\"on\">\r\n\r\n    <!-- Le styles -->\r\n    <link href=\"css/bootswatch/Cos" +
"mo/bootstrap.min.css\" rel=\"stylesheet\">\r\n    <link href=\"http://ajax.googleapis." +
"com/ajax/libs/jqueryui/1.8.21/themes/black-tie/jquery-ui.css\" rel=\"stylesheet\">\r" +
"\n    <link href=\"css/jquery.tocify.css\" rel=\"stylesheet\">\r\n    <link href=\"css/p" +
"rettify.css\" rel=\"stylesheet\" type=\"text/css\">\r\n    <link href=\"css/styles.css\" " +
"rel=\"stylesheet\" type=\"text/css\">\r\n    <link href=\"css/rainbow/themes/tomorrow-n" +
"ight.css\" rel=\"stylesheet\" type=\"text/css\">\r\n    <link rel=\"stylesheet\" type=\"te" +
"xt/css\" href=\"css/rainbowlines/theme.css\" media=\"screen\" />\r\n    <!-- Le HTML5 s" +
"him, for IE6-8 support of HTML5 elements -->\r\n    <!--[if lt IE 9]>\r\n           " +
" <script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\"> </script>\r\n  " +
"      <![endif]-->\r\n\r\n    <!-- Le fav and touch icons -->\r\n    <link href=\"../as" +
"sets/ico/favicon.ico\" rel=\"shortcut icon\">\r\n    <link href=\"../assets/ico/apple-" +
"touch-icon-144-precomposed.png\" rel=\"apple-touch-icon-precomposed\" sizes=\"144x14" +
"4\">\r\n    <link href=\"../assets/ico/apple-touch-icon-114-precomposed.png\" rel=\"ap" +
"ple-touch-icon-precomposed\" sizes=\"114x114\">\r\n    <link href=\"../assets/ico/appl" +
"e-touch-icon-72-precomposed.png\" rel=\"apple-touch-icon-precomposed\" sizes=\"72x72" +
"\">\r\n    <link href=\"../assets/ico/apple-touch-icon-57-precomposed.png\" rel=\"appl" +
"e-touch-icon-precomposed\">\r\n    <style type=\"text/css\">\r\n        /*TODO: move to" +
" css*/\r\n        .widthTiny{ width:5%;}\r\n        .widthSmall{ width:15%;}\r\n      " +
"  .widthMedium{ width:35%;}\r\n        .widthLarge{ width:50%;}        \r\n        ." +
"nuget-badge code {\r\n            -moz-border-radius: 5px;\r\n            -webkit-bo" +
"rder-radius: 5px;\r\n            background-color: #202020;\r\n            border: 4" +
"px solid silver;\r\n            border-radius: 5px;\r\n            box-shadow: 2px 2" +
"px 3px #6e6e6e;\r\n            color: #e2e2e2;\r\n            display: block;\r\n     " +
"       font: 1.5em \'andale mono\',\'lucida console\',monospace;\r\n            line-h" +
"eight: 1.5em;\r\n            overflow: auto;\r\n            padding: 15px;\r\n        " +
"}\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <a id=\"fork-me\" href=\"#\" target=\"_blank\"" +
">\r\n        <img style=\"border: 0px currentColor; border-image: none; top: 0px; r" +
"ight: 0px; position: fixed; z-index: 999999;\" alt=\"Fork me on GitHub\" src=\"https" +
"://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png\"></a>\r\n    <nav" +
" class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\" style=\"margin-" +
"bottom: 120px;\">\r\n        <!-- Brand and toggle get grouped for better mobile di" +
"splay -->\r\n        <div class=\"navbar-header\">\r\n            <button type=\"button" +
"\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-c" +
"ollapse-1\">\r\n                <span class=\"sr-only\">Toggle navigation</span>\r\n   " +
"             <span class=\"icon-bar\"></span>\r\n                <span class=\"icon-b" +
"ar\"></span>\r\n                <span class=\"icon-bar\"></span>\r\n            </butto" +
"n>\r\n            <a class=\"navbar-brand\" href=\"#\">Project.Name</a>\r\n        </div" +
">\r\n\r\n        <!-- Collect the nav links, forms, and other content for toggling -" +
"->\r\n        <div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse" +
"-1\">\r\n            <ul class=\"nav navbar-nav\">\r\n                <li class=\"active" +
"\"><a href=\"#\">Link</a></li>\r\n                <li><a href=\"#\">Link</a></li>\r\n    " +
"            <!--  <li class=\"dropdown\">\r\n                              <a href=\"" +
"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">Dropdown <b class=\"caret\"></b>" +
"</a>\r\n                              <ul class=\"dropdown-menu\">\r\n                " +
"                  <li><a href=\"#\">Action</a></li>\r\n                             " +
"     <li><a href=\"#\">Another action</a></li>\r\n                                  " +
"<li><a href=\"#\">Something else here</a></li>\r\n                                  " +
"<li class=\"divider\"></li>\r\n                                  <li><a href=\"#\">Sep" +
"arated link</a></li>\r\n                                  <li class=\"divider\"></li" +
">\r\n                                  <li><a href=\"#\">One more separated link</a>" +
"</li>\r\n                              </ul>\r\n                          </li> -->\r" +
"\n            </ul>\r\n        </div>\r\n        <!-- /.navbar-collapse -->\r\n    </na" +
"v>\r\n\r\n\r\n    <div class=\"container-fluid\" style=\"margin-top: 50px;\">\r\n        <di" +
"v class=\"row\">\r\n            <div class=\"tocify col-sm-3 col-md-3\">\r\n            " +
"    <div id=\"toc\">\r\n                </div>\r\n                <!--/.well -->\r\n    " +
"        </div>\r\n            <!--/span-->\r\n            <div class=\"col-sm-9 col-m" +
"d-9\">\r\n                <div class=\"jumbotron\">\r\n                    <h1>Project." +
"Name</h1>\r\n\r\n                    <br>\r\n                    <br>\r\n\r\n             " +
"       <h2>Description</h2>\r\n                    <p>Enter Project Repo Descripti" +
"on Here</p>\r\n                    <br>\r\n                    <p>\r\n                " +
"        The project is hosted on <a class=\"projectLinks\" href=\"#\" target=\"_blank" +
"\">Github</a> and is available for use under the <a class=\"projectLinks\" href=\"#\"" +
" target=\"_blank\">MIT software license</a>.  You can report bugs and discuss feat" +
"ures on the <a href=\"#\" target=\"_blank\">GitHub issues page</a>, or send tweets t" +
"o <a href=\"#\" target=\"_blank\">Enter Project Twitter Page Here</a>.\r\n            " +
"        </p>\r\n                    <p><a class=\"btn btn-primary btn-lg\" href=\"#\" " +
"target=\"_blank\">Fork on Github »</a></p>\r\n                </div>\r\n              " +
"  \r\n                \r\n                <h2>Install from Nuget</h2>\r\n             " +
"   <div class=\"nuget-badge\">\r\n                    <p>\r\n                        <" +
"code>PM&gt; Install-Package Project.Name\r\n                        </code>\r\n     " +
"               </p>\r\n                </div>\r\n                <h2>Requirements</h" +
"2>\r\n                <br>\r\n                <p class=\"well\">\r\n                    " +
"Enter Project Requirements Here\r\n                </p>\r\n                \r\n       " +
"         <br>\r\n\r\n                <!-----------Start---------------->\r\n\r\n\r\n");


            
            #line 188 "..\..\Body.cshtml"
                 foreach (var node in Model)
                {

            
            #line default
            #line hidden
WriteLiteral("                    <h2 data-path=\"");


            
            #line 190 "..\..\Body.cshtml"
                               Write(node.Path);

            
            #line default
            #line hidden
WriteLiteral("\">");


            
            #line 190 "..\..\Body.cshtml"
                                             Write(node.Name);

            
            #line default
            #line hidden
WriteLiteral("</h2>\r\n");



WriteLiteral("                    <p class=\"well\">\r\n                    </p>\r\n");


            
            #line 193 "..\..\Body.cshtml"
                    foreach (var classNode in node.Classes)
                    {

            
            #line default
            #line hidden
WriteLiteral("                    <a id=\"");


            
            #line 195 "..\..\Body.cshtml"
                      Write(HttpUtility.HtmlEncode(classNode.Path));

            
            #line default
            #line hidden
WriteLiteral("\">&nbsp;</a>\r\n");



WriteLiteral("                    <h3 data-path=\"");


            
            #line 196 "..\..\Body.cshtml"
                               Write(node.Path);

            
            #line default
            #line hidden
WriteLiteral("\">");


            
            #line 196 "..\..\Body.cshtml"
                                            Write(HttpUtility.HtmlEncode(classNode.Name));

            
            #line default
            #line hidden
WriteLiteral("</h3>\r\n");


            
            #line 197 "..\..\Body.cshtml"
                        if (classNode.Interfaces.Any())
                        {

            
            #line default
            #line hidden
WriteLiteral("                    <b>");


            
            #line 199 "..\..\Body.cshtml"
                   Write("Interfaces: ");

            
            #line default
            #line hidden
WriteLiteral("</b>\r\n");


            
            #line 200 "..\..\Body.cshtml"
                        }
                        foreach (var face in classNode.Interfaces)
                        {
                    
            
            #line default
            #line hidden
            
            #line 203 "..\..\Body.cshtml"
                Write(getTypeName(face));

            
            #line default
            #line hidden
            
            #line 203 "..\..\Body.cshtml"
                                        
                            if (face != classNode.Interfaces.Last())
                            {
                    
            
            #line default
            #line hidden
            
            #line 206 "..\..\Body.cshtml"
                Write(", ");

            
            #line default
            #line hidden
            
            #line 206 "..\..\Body.cshtml"
                           
                            }
                        }
                        if (classNode.Interfaces.Any())
                        {

            
            #line default
            #line hidden
WriteLiteral("                    <br />\r\n");


            
            #line 212 "..\..\Body.cshtml"
                        }
                        if (@classNode.Parents.Any())
                        {

            
            #line default
            #line hidden
WriteLiteral("                    <b>");


            
            #line 215 "..\..\Body.cshtml"
                   Write("Inheritance Hierarchy: ");

            
            #line default
            #line hidden
WriteLiteral("</b>\r\n");



WriteLiteral("                    <br />\r\n");


            
            #line 217 "..\..\Body.cshtml"
                        }
                        const string tab = "&nbsp;&nbsp;&nbsp;&nbsp;";
                        var indent = tab;
                        foreach (var parent in classNode.Parents)
                        {
                    
            
            #line default
            #line hidden
            
            #line 222 "..\..\Body.cshtml"
                Write(indent);

            
            #line default
            #line hidden
            
            #line 222 "..\..\Body.cshtml"
                             
            
            #line default
            #line hidden
            
            #line 222 "..\..\Body.cshtml"
                        Write(HttpUtility.HtmlEncode(getTypeName(parent)));

            
            #line default
            #line hidden

WriteLiteral("<br />\r\n");


            
            #line 223 "..\..\Body.cshtml"
                            indent = indent + tab;
                        }


            
            #line default
            #line hidden
WriteLiteral("                    <br />\r\n");



WriteLiteral("                    <p class=\"well\">\r\n                    </p>\r\n");


            
            #line 229 "..\..\Body.cshtml"
                        if (classNode.Properties.Any())
                        {

            
            #line default
            #line hidden
WriteLiteral("                    <h4>Properties</h4>\r\n");



WriteLiteral(@"                            <table class=""table table-striped table-bordered table-condensed"">
                                
                                <colgroup>
                                    <col class=""widthTiny""  />
                                    <col class=""widthMedium""  />
                                    <col class=""widthSmall""  />
                                    <col class=""widthLarge""  />
                                    
                                </colgroup>
                                <tbody>
                                    <tr>
                                        <th></th>
                                        <th>Type</th>
                                        <th>Name</th>
                                        <th>Remarks</th>
                                    </tr>
");


            
            #line 248 "..\..\Body.cshtml"
                                     foreach (var property in classNode.Properties)
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <tr data-path=\"");


            
            #line 250 "..\..\Body.cshtml"
                                                   Write(property.Path);

            
            #line default
            #line hidden
WriteLiteral("\">\r\n\r\n                                            <td title=\"");


            
            #line 252 "..\..\Body.cshtml"
                                                   Write(property.FullName);

            
            #line default
            #line hidden
WriteLiteral("\" class=\"optionName\" data-content=\"\">\r\n                                          " +
"      ");


            
            #line 253 "..\..\Body.cshtml"
                                            Write(property.IsStatic ? "static" : "");

            
            #line default
            #line hidden
WriteLiteral("\r\n                                            </td>\r\n                            " +
"                <td>");


            
            #line 255 "..\..\Body.cshtml"
                                           Write(getTypeName(property.ReturnType));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                                            <td>");


            
            #line 256 "..\..\Body.cshtml"
                                            Write(property.Name);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                                            <td></td>\r\n                   " +
"                     </tr>\r\n");


            
            #line 259 "..\..\Body.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("                                </tbody>\r\n                            </table>\r\n");


            
            #line 262 "..\..\Body.cshtml"
                        }
                        if (classNode.Methods.Any())
                        {

            
            #line default
            #line hidden
WriteLiteral("                    <h4>Methods</h4>\r\n");


            
            #line 266 "..\..\Body.cshtml"


            
            #line default
            #line hidden
WriteLiteral(@"                            <table class=""table table-striped table-bordered table-condensed"">
                                <colgroup>                                   
                                </colgroup>
                                <tbody>
                                    <tr>
                                        <th></th>
                                        <th>Return Type</th>
                                        <th>Source</th>
                                        <th>Method</th>
                                        <th>Remarks</th>
                                    </tr>
");


            
            #line 278 "..\..\Body.cshtml"
                                     foreach (var method in classNode.Methods)
                                    {

            
            #line default
            #line hidden
WriteLiteral("                                        <tr data-path=\"");


            
            #line 280 "..\..\Body.cshtml"
                                                   Write(method.Path);

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                            <td title=\"");


            
            #line 281 "..\..\Body.cshtml"
                                                   Write(method.FullName);

            
            #line default
            #line hidden
WriteLiteral("\" class=\"optionName\" data-content=\"\">\r\n                                          " +
"      ");


            
            #line 282 "..\..\Body.cshtml"
                                            Write(method.IsStatic ? "static" : "");

            
            #line default
            #line hidden
WriteLiteral("\r\n                                            </td>\r\n                            " +
"                <td>");


            
            #line 284 "..\..\Body.cshtml"
                                           Write(getTypeName(method.ReturnType));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                                            <td>");


            
            #line 285 "..\..\Body.cshtml"
                                           Write(getTypeName(method.SourceType));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n");


            
            #line 286 "..\..\Body.cshtml"
                                               var text = String.Concat(method.Name, method.TypeArguments, "(", method.Signature, ")"); 

            
            #line default
            #line hidden
WriteLiteral("                                            <td>");


            
            #line 287 "..\..\Body.cshtml"
                                           Write(HttpUtility.HtmlEncode(text));

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                                            <td></td>\r\n                   " +
"                     </tr>\r\n");


            
            #line 290 "..\..\Body.cshtml"
                                    }

            
            #line default
            #line hidden
WriteLiteral("                                </tbody>\r\n                            </table>\r\n");


            
            #line 293 "..\..\Body.cshtml"
                        }
                    }
                }

            
            #line default
            #line hidden
WriteLiteral("\r\n                <!-------------------------End----------------->\r\n\r\n           " +
"     <h2>Contributing</h2>\r\n                <p class=\"well\">\r\n                  " +
"  Take care to maintain the existing coding style. Add <strong>Enter Unit Testin" +
"g Framework</strong> unit tests for any new or changed functionality. Lint and t" +
"est your code using <strong>Enter Build Tool Here</strong>.\r\n                </p" +
">\r\n                <p class=\"well\">\r\n                    <span class=\"note\">Afte" +
"r you have verified your code, send a pull request to the <em>Project.Name</em> " +
"develop branch.  After you send a pull request, you will hear back from me short" +
"ly after I review your code.  You’ll find source code in the <code>src</code> su" +
"bdirectory!\r\n                    </span>\r\n                </p>\r\n                " +
"<br>\r\n                <h2>Extending</h2>\r\n                <p class=\"well\">\r\n    " +
"                If you find that you need a feature that <em>Project.Name</em> d" +
"oes not currently support, either let me know via the <a href=\"#\" target=\"_blank" +
"\">Github issue tracker</a>, or <a href=\"#\" target=\"_blank\">fork the project</a> " +
"and and easily extend <em>Project.Name</em>!\r\n                </p>\r\n            " +
"    <br>\r\n                <h2>Copyright</h2>\r\n                <p class=\"well\">\r\n" +
"                    Copyright © 2013 Enter Author Name Here\r\n                </p" +
">\r\n                <p> Documentation build with <a href=\"https://github.com/Mini" +
"verCheevy/api-documentor\">api-documentor</a> and <a href=\"http://gregfranko.com/" +
"Document-Bootstrap/\">Document-Bootstrap</a></p>\r\n            </div>\r\n        </d" +
"iv>\r\n        <!--/row-->\r\n\r\n    </div>\r\n    <!--/.fluid-container-->\r\n\r\n    <!--" +
" Le javascript\r\n            ================================================== -" +
"->\r\n    <!-- Placed at the end of the document so the pages load faster -->\r\n   " +
" <script src=\"js/rainbow/rainbow.min.js\"> </script>\r\n    <script src=\"js/rainbow" +
"/language/generic.js\"> </script>\r\n    <script src=\"js/rainbow/language/html.js\">" +
" </script>\r\n    <script src=\"js/rainbow/language/css.js\"> </script>\r\n    <script" +
" src=\"js/rainbow/language/javascript.js\"> </script>\r\n    <script src=\"js/rainbow" +
"lines/rainbow.linenumbers.js\"> </script>\r\n    <script src=\"js/jquery.min.js\"> </" +
"script>\r\n    <script src=\"js/jquery-ui.min.js\"> </script>\r\n    <script src=\"js/b" +
"ootstrap.min.js\"> </script>\r\n    <script src=\"js/jquery.tocify.min.js\"> </script" +
">\r\n    <script src=\"js/prettify.js\"> </script>\r\n\r\n    <script>\r\n        $(functi" +
"on () {\r\n\r\n            $(\"#toc\").tocify({ selectors: \"h2, h3, h4\", scrollTo: 60," +
" highlightOffset: 60, extendPage: true });\r\n\r\n            prettyPrint();\r\n\r\n    " +
"        $(\".optionName\").popover({ trigger: \"hover\", container: \"body\" });\r\n\r\n  " +
"          $(\"a[href=\'#\']\").click(function (event) {\r\n\r\n                event.pre" +
"ventDefault();\r\n\r\n            });\r\n\r\n            Rainbow.color();\r\n        });\r\n" +
"    </script>\r\n\r\n</body>\r\n</html>\r\n");


        }
    }
}
#pragma warning restore 1591
